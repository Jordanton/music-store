package springmusic.web.controller;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;

import springmusic.model.Comment;
import springmusic.model.Track;
import springmusic.model.User;
import springmusic.model.dao.CommentDao;
import springmusic.model.dao.TrackDao;
import springmusic.model.dao.UserDao;

@Controller
@SessionAttributes("user")
public class UserController {

    @Autowired
    private UserDao userDao;

    @Autowired
    private TrackDao trackDao;

    @Autowired
    private CommentDao commentDao;

    @RequestMapping(value = "/commentAdd.html", method = RequestMethod.POST)
    public String addComment(@RequestParam int trackid,
            @RequestParam String reviewTitle, @RequestParam String reviewBody,
            @RequestParam int rating, HttpSession session) {

        User sessionUser = (User) session.getAttribute("sessionUser");
        if (sessionUser == null)
            return "redirect:login.html";

        Track track = trackDao.getTrack(trackid);
        User user = userDao.getUser(sessionUser.getId());
        Comment comment = new Comment(reviewTitle, reviewBody, rating, user,
                track);
        commentDao.save(comment);

        return "redirect:SongPage.html?trackid=" + trackid;
    }

    @RequestMapping(value = "playlistAdd.html")
    public String addPlaylist(@RequestParam String trackid,
            HttpSession session) {

        User sessionUser = (User) session.getAttribute("sessionUser");
        Track track = trackDao.getTrack(Integer.parseInt(trackid));
        User user = userDao.getUser(sessionUser.getId());

        if (sessionUser != null) {
            user.addPlaylistTrack(track);
            track.addPlaylistUser(user);
            userDao.save(user);
            trackDao.save(track);
        }

        return "redirect:home.html";
    }

    @RequestMapping(value = "/adminViewUsers.html")
    public String adminViewUser(ModelMap models) {
        models.put("allUsers", userDao.getUsers());
        return "AdminViewUsers";
    }

    @RequestMapping("/comments.html")
    public String comments(HttpSession session, ModelMap models) {
        User sessionUser = (User) session.getAttribute("sessionUser");
        if (sessionUser == null) {
            return "redirect:login.html";
        }
        models.put("comments", commentDao.getComments(sessionUser));
        return "Comments";
    }

    @RequestMapping("/commentRemove.html")
    public String deleteComment(HttpSession session, @RequestParam Integer id) {

        Comment comment = commentDao.getComment(id);
        commentDao.delete(comment);
        return "redirect:comments.html";
    }

    @RequestMapping("/playlistRemove.html")
    public String deletePlaylistTrack(HttpSession session, @RequestParam Integer tid,
            @RequestParam Integer uid) {

        User sessionUser = (User) session.getAttribute("sessionUser");
        if (sessionUser == null) {
            return "redirect:login.html";
        }

        Track track = trackDao.getTrack(tid);
        User user = userDao.getUser(uid);

        track.removePlaylistUser(user);
        user.removePlayListTrack(track);

        trackDao.save(track);
        user = userDao.save(user);

        return "redirect:playlist.html";
    }

    @RequestMapping("/downloads.html")
    public String downloads(HttpSession session, ModelMap models) {
        User sessionUser = (User) session.getAttribute("sessionUser");
        if (sessionUser == null) {
            return "redirect:login.html";
        }
        models.put("modelUser", userDao.getUser(sessionUser.getId()));
        return "Downloads";
    }

    @RequestMapping(value = "/editProfile.html", method = RequestMethod.POST)
    public String edit(HttpSession session, @ModelAttribute User user,
            SessionStatus status) {

        User u = userDao.save(user);
        session.setAttribute("sessionUser", u);
        status.setComplete();
        return "redirect:userPage.html";
    }

    @RequestMapping(value = "/editProfile.html", method = RequestMethod.GET)
    public String edit(ModelMap models, HttpSession session) {
        User user = (User) session.getAttribute("sessionUser");
        if (user == null) {
            return "redirect:login.html";
        }
        models.put("user", userDao.getUser(user.getId()));
        return "LoginProfile";
    }

    @RequestMapping("/playlist.html")
    public String playlist(HttpSession session, ModelMap models) {
        User user = (User) session.getAttribute("sessionUser");
        if (user == null) {
            return "redirect:login.html";
        }
        models.put("modelUser", userDao.getUser(user.getId()));
        return "Playlist";
    }

    @RequestMapping(value = "/profiles.html")
    public String profiles(ModelMap models) {
        models.put("users", userDao.getUsers());
        return "Profiles";
    }

    @RequestMapping(value = "/profileView.html")
    public String profileView(@RequestParam int id, ModelMap models) {
        models.put("user", userDao.getUser(id));
        return "ProfileView";
    }

    @RequestMapping("userPage.html")
    public String userPage(HttpSession session) {
        User user = (User) session.getAttribute("sessionUser");
        if (user == null)
            return "redirect:login.html";
        else
            return "UserPage";
    }
}
