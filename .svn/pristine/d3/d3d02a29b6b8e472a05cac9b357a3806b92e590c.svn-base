package springmusic.web.controller;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.context.ServletContextAware;

import springmusic.model.Genre;
import springmusic.model.State;
import springmusic.model.User;
import springmusic.model.dao.AlbumDao;
import springmusic.model.dao.ArtistDao;
import springmusic.model.dao.TrackDao;
import springmusic.model.dao.UserDao;

@Controller
public class HomeController implements ServletContextAware, InitializingBean {

    @Autowired
    private UserDao userDao;

    @Autowired
    private TrackDao trackDao;

    @Autowired
    private ArtistDao artistDao;

    @Autowired
    private AlbumDao albumDao;

    private ServletContext context;

    @RequestMapping("/about.html")
    public String about() {
        return "About";
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        context.setAttribute("states", State.values());
        context.setAttribute("masterGenreList", Genre.values());
    }

    @RequestMapping(value = { "/home.html", "/index.html" },
            method = RequestMethod.GET)
    public String home(ModelMap models) {
        models.put("genreMap", trackDao.getRandomGenreTracksMap());
        models.put("features", trackDao.getFeatureTracks());
        return "HomePage";
    }

    @RequestMapping(value = { "/home.html", "/index.html" },
            method = RequestMethod.POST)
    public String home(@RequestParam String searchBar, ModelMap models) {
        models.put("searchResultsArtist", artistDao.searchArtist(searchBar));
        models.put("searchResultsTrack", trackDao.searchTrack(searchBar));
        models.put("searchResultsAlbum", albumDao.searchAlbum(searchBar));
        models.put("searchResultsUser", userDao.searchSearch(searchBar));
        models.put("searchBar", searchBar);
        return home(models);
    }

    @RequestMapping(value = "/login.html", method = RequestMethod.GET)
    public String login(ModelMap models, HttpSession session) {
        User user = (User) session.getAttribute("sessionUser");
        if (user == null) {
            models.put("user", new User());
            return "Login";
        } else {
            return "Login";
        }
    }

    @RequestMapping(value = "/login.html", method = RequestMethod.POST)
    public String login(@ModelAttribute User user, HttpSession session,
            SessionStatus status) {
        for (User u : userDao.getUsers()) {
            if (u.getEmail().equals(user.getEmail())
                    && u.getPassword().equals(user.getPassword())) {
                session.setAttribute("sessionUser", u);
                return "redirect:userPage.html";
            }
        }
        status.setComplete();
        return "redirect:login.html";
    }

    @RequestMapping("/loginZoe.html")
    public String loginZoe(HttpSession session) {
        session.setAttribute("sessionUser", userDao.getUser(2));
        return "redirect:userPage.html";
    }

    @RequestMapping("/logout.html")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:home.html";
    }

    @RequestMapping(value = "/register.html", method = RequestMethod.GET)
    public String register(HttpSession session, ModelMap models) {
        User sessionUser = (User) session.getAttribute("sessionUser");
        if (sessionUser != null)
            return "redirect:userPage.html";

        models.put("registeringUser", new User());
        models.put("states", State.values());
        return "Register";

    }

    @RequestMapping(value = "/register.html", method = RequestMethod.POST)
    public String register(HttpSession session,
            @ModelAttribute User registeringUser) {

        userDao.save(registeringUser);
        return "redirect:login.html";
    }

    public void setServletContext(ServletContext servletContext) {
        this.context = servletContext;
    }
}
